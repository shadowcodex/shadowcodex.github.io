<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shannon Duncan - Software Developer</title>
    <description>A full stack software developer, a father, and a gamer. Not much else here...</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 25 Sep 2017 11:22:07 -0500</pubDate>
    <lastBuildDate>Mon, 25 Sep 2017 11:22:07 -0500</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>[Meteor] Meteor Up Site is LIVE!!!</title>
        <description>&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/imgs/blogmedia/meteor-up-console.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-meteor-up&quot;&gt;What is Meteor Up?&lt;/h2&gt;

&lt;p&gt;Meteor Up is a production quality application to deploy your Meteor App to anywhere.
Normally you can only deploy your meteor application to Meteor’s own Galaxy cloud
servers. However with Meteor Up (MUP) you can deploy it to AWS, Google Cloud, Digital Ocean,
Azure, or any other place you can run an Ubuntu server.&lt;/p&gt;

&lt;h2 id=&quot;how-easy-is-it&quot;&gt;How easy is it?&lt;/h2&gt;

&lt;p&gt;Really Easy!!! You setup your config file and then just run a few commands.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mup setup&lt;/code&gt; and then &lt;code class=&quot;highlighter-rouge&quot;&gt;mup deploy&lt;/code&gt; and boom! You’re site is up. Assuming you did your 
config file right that is.&lt;/p&gt;

&lt;h2 id=&quot;where-can-i-find-out-more-info&quot;&gt;Where can I find out more info?&lt;/h2&gt;

&lt;p&gt;The website of course! You can find it &lt;a href=&quot;http://meteor-up.com&quot;&gt;here - home page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The getting started tutorial can be found &lt;a href=&quot;http://meteor-up.com/getting-started.html&quot;&gt;here - getting started&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And finally the full docs can be found &lt;a href=&quot;http://meteor-up.com/docs.html&quot;&gt;here - documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;i-need-help&quot;&gt;I need help!&lt;/h2&gt;

&lt;p&gt;There are two major places to get help. If it’s a quick quesiton or you just want to chat drop by
the &lt;a href=&quot;http://meteor-up.com/docs.html&quot;&gt;Gitter Chat&lt;/a&gt;. Otherwise, you should probably file an &lt;a href=&quot;https://github.com/zodern/meteor-up/issues&quot;&gt;issue on Github&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Sep 2017 02:30:00 -0500</pubDate>
        <link>http://localhost:4000/2017/09/01/meteor-up-site-live.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/09/01/meteor-up-site-live.html</guid>
        
        
      </item>
    
      <item>
        <title>[Opinion] Do not just imitate, but instead understand!</title>
        <description>&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/imgs/blogmedia/object.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-you-are-doing-some-form-of-training&quot;&gt;So you are doing some form of training?&lt;/h2&gt;

&lt;p&gt;Whether you are watching a coding course online or sitting in a lecture, 
you need to understand what is going on.&lt;/p&gt;

&lt;h2 id=&quot;copying-vs-understanding&quot;&gt;Copying VS Understanding&lt;/h2&gt;

&lt;p&gt;A lot of people just look at examples and copy them. However this can get you 
stuck a lot of times, and can end up backfiring for you. What happens when you
hit an issue that you haven’t ever copied before? Instead of just taking whatever
the training course gives you at face value, dig deeper!&lt;/p&gt;

&lt;p&gt;You will learn more and be better at what you are training for if you do. If you are
wondering how you can go deeper here are a few suggestions.&lt;/p&gt;

&lt;h3 id=&quot;one&quot;&gt;One.&lt;/h3&gt;

&lt;p&gt;Instead of just copy and pasting an example type it out. Line by line. As you do so
try and understand why they did what they did. This not only gives you insight into
actually writing the code but might result in miss types. You’ll get bugs and have
to figure out why it isn’t working. Problem solving and troubleshooting a program can
often times teach you so much more about what you are writing that just reading or
copy pasting.&lt;/p&gt;

&lt;h3 id=&quot;two&quot;&gt;Two.&lt;/h3&gt;

&lt;p&gt;When you read through some code, try to close the book and type out the parts from
memory. This not only helps you learn the code blocks but you’ll also be able to create
you own coding style as you aren’t verbatim copying code.&lt;/p&gt;

&lt;h3 id=&quot;three&quot;&gt;Three.&lt;/h3&gt;

&lt;p&gt;Try it another way. Just what it says, you look at a block of code to copy and figure
out what it is doing. Then you try to come up with a different algorithm or method of
getting the same answer. You may not have the most efficient result from it, but it 
will help you learn the concepts of why they did it the way they did.&lt;/p&gt;

&lt;h3 id=&quot;four&quot;&gt;Four.&lt;/h3&gt;

&lt;p&gt;Ask Questions. If you have a community forum or are live or in person with the speaker
then ask questions. Ask them why they did things certain ways, and if there are other
better ways to do them. Ask for deeper clarification on terms and usage.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I can only rehash it so many times, but please for the sake of your learning and the 
future of software development… Please take time to actually learn what you are seeing.&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Aug 2017 02:30:00 -0500</pubDate>
        <link>http://localhost:4000/2017/08/24/do-not-just-immitate-but-understand.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/24/do-not-just-immitate-but-understand.html</guid>
        
        
      </item>
    
      <item>
        <title>[Review] My New Favorite Editor. Vistual Studio Code.</title>
        <description>&lt;p&gt;&lt;img class=&quot;img-responsive&quot; src=&quot;/imgs/blogmedia/vscode.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A while back in 2016 or so I published an article over at Pluralsight about 15 editors 
that at the time were on my top list of editors. I mostly used Atom.io for my projects
and felt it was pretty easy to use and had the flexibility to become robust enough for 
most projects.&lt;/p&gt;

&lt;p&gt;However recently I decided to bite the bullet and try out Microsoft’s Visual Studio Code (vscode).
I have to say that I am actually pleasantly surprised. I decided to try it because of my 
new found love for TypeScript and Angular, and vscode seemed to be the best ‘free’ option 
to support TypeScript.&lt;/p&gt;

&lt;p&gt;Out of the box it works great for simple TypeScript projects, and the integrated terminal works
excellent on both MacOS and Windows. However I find that VSCode truly shines when you add a
few extensions to it. I’ll list those out here below and go over them quickly.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TSLint
    &lt;ul&gt;
      &lt;li&gt;Integrates the tslint linter for the TypeScript language into VS Code. Extremely helpful at detecting and helping fix TypeScript issues.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Angular Language Services
    &lt;ul&gt;
      &lt;li&gt;This extension provides a rich editing experience for Angular templates, both inline and external templates. This extension is brought to you by members of the Angular team. It is fantastic at helping write solid code in the html templates.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Angular v4 TypeScript Snippets
    &lt;ul&gt;
      &lt;li&gt;Angular snippets that follow the official style guide, for TypeScript, templates, and RxJS.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bracket Pair Colorizor
    &lt;ul&gt;
      &lt;li&gt;This extension allows matching brackets to be identified with colors. This is super helpful when you have nested functions and objects.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Path Intellisense
    &lt;ul&gt;
      &lt;li&gt;Visual Studio Code plugin that autocompletes filenames.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Debugger for Chrome
    &lt;ul&gt;
      &lt;li&gt;It’s a Debugger for VSCode that’s for Chrome…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bootstrap 3 Snippets
    &lt;ul&gt;
      &lt;li&gt;Emmet for bootstrap 3 components. Quickly build bootstrap layouts with autogenerated components from getbootstrap.com&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;One Dark Pro
    &lt;ul&gt;
      &lt;li&gt;Brings me my Atom.io style and theme to VSCode&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since I’m apparently doing lists now, here is a list of things that I like about VSCode&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open Source&lt;/li&gt;
  &lt;li&gt;Extensible&lt;/li&gt;
  &lt;li&gt;Native Git Support&lt;/li&gt;
  &lt;li&gt;Emmet out of the box&lt;/li&gt;
  &lt;li&gt;Built in debugger&lt;/li&gt;
  &lt;li&gt;Built in Terminal&lt;/li&gt;
  &lt;li&gt;Keyboard binding’s from other text editors&lt;/li&gt;
  &lt;li&gt;Highly Customizable&lt;/li&gt;
  &lt;li&gt;IntelliSense&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve been able to work with Angular projects like never before with VSCode, and it looks like
I have found my new favorite editor. If you haven’t tried it out yet, do yourself a favor 
and go check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot; class=&quot;btn btn-lg btn-success&quot;&gt; Download VSCode    &lt;span class=&quot;glyphicon glyphicon-save&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Aug 2017 02:30:00 -0500</pubDate>
        <link>http://localhost:4000/2017/08/21/visual-studio-code.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/21/visual-studio-code.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to new beginnings!</title>
        <description>&lt;p&gt;You may have or may not have noticed that you got redirected to this site from unrestrictedcoding.com. I feel as though UC became a dead project and wasn’t getting the respect it diserved. So I have created this new site to start fresh.&lt;/p&gt;

&lt;p&gt;The home page is a simple listing of projects, and I’ll have a blog here on the &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog/&lt;/code&gt; page. That’s about it. Other projects I create will be linked from here as it grows.&lt;/p&gt;

&lt;p&gt;One of the first projects I am working on is a complete rewrite of an editor I created a few years ago. This time I’ll be doing it right using Angular 4 and the newest products of Firebase.&lt;/p&gt;

&lt;p&gt;Keep an eye open for new blog posts!&lt;/p&gt;

</description>
        <pubDate>Fri, 18 Aug 2017 21:44:33 -0500</pubDate>
        <link>http://localhost:4000/2017/08/18/welcome-to-new-beginnings.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/18/welcome-to-new-beginnings.html</guid>
        
        
      </item>
    
      <item>
        <title>CodeFights. A way to keep sharp.</title>
        <description>&lt;p&gt;&lt;img src=&quot;/imgs/blogmedia/codefights.png&quot; class=&quot;img-responsive&quot; style=&quot;height:300px;margin:auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you have had some time since your schooling, you tend to start losing an 
edge on the things that were taught. Things that we learned in our computer 
science classes no longer come quickly to our minds. Especially if you get a development 
job that doesn’t require you to use all of your skills all the time (Which none do).&lt;/p&gt;

&lt;p&gt;That’s when you need to step in and take back your brain. Time to sharpen your edge.&lt;/p&gt;

&lt;h2 id=&quot;challenge-sites&quot;&gt;Challenge Sites&lt;/h2&gt;

&lt;p&gt;There are a lot of different challenge sites out there, however, my favorite is CodeFights.
Several reasons exist for this, but the biggest reason is their answer submission. I’ll get into that. First… What is a challenge site?&lt;/p&gt;

&lt;p&gt;A challenge site is a community site built to hit on several aspects of computer programming. 
They tend to have sections and categories based on several things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Algorithms&lt;/li&gt;
  &lt;li&gt;Language Syntax&lt;/li&gt;
  &lt;li&gt;Dev Ops&lt;/li&gt;
  &lt;li&gt;others…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Algorithms tends to be the largest and most used categories that I have found. Each of these categories
has separate challenges for you to complete. Some may want you to implement a sorting
algorithm using your favorite language. Each challenge has a goal, and you are scored on how well
your code works.&lt;/p&gt;

&lt;p&gt;They tend to use test cases for the scoring. Usually, there are a few sample test cases
that you can see what is required of you. These include an &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;expected output&lt;/code&gt;.
Beyond the sample test cases, you are required to pass a certain number of hidden test cases 
in order to get the full score. These are unknown inputs, and can really break your algorithm 
if you don’t have all your ducks in a row.&lt;/p&gt;

&lt;h2 id=&quot;why-codefights&quot;&gt;Why &lt;a href=&quot;https://codefights.com/signup/Tc6ZhHbjaerYfyTBB/main&quot;&gt;CodeFights&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;CodeFights is one of many sites out there that provides challenges. However, I tend
to enjoy CodeFights more than any other one. This has to do with their community,
the way they present challenges, and the way you output your answer.&lt;/p&gt;

&lt;p&gt;1st and foremost on my list of reasons is output. The biggest thing for me is the way they require you to output 
your answer. Most challenge sites I have seen use your 
&lt;a href=&quot;#&quot; data-toggle=&quot;popover&quot; data-trigger=&quot;focus&quot; title=&quot;STDOUT - Standard Output&quot; data-content=&quot;Standard streams are preconnected input and output communication channels  between a computer program and its environment when it begins execution.  The three I/O connections are called standard input (stdin), standard output (stdout)  and standard error (stderr) --Wikipedia&quot; onclick=&quot;return false;&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;&lt;sup&gt;i&lt;/sup&gt;&lt;/a&gt; 
for getting your output for the question. However, CodeFights uses just a simple return from the 
function they setup for you. You write your logic inside the function and then 
send back your output via return. This is awesome because they are able to allow you to write 
out to STDOUT for debugging purposes. Now, you want to disable this for submitting
your code because they tend to have hidden test cases with a ton of information. 
The debug output can slow your program down and cause it to fail tests.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/imgs/blogmedia/codefight-output.png&quot; class=&quot;img-responsive&quot; style=&quot;height:300px;margin:auto;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Secondly, I love that they want you to write a function. They give you data through
your function inputs, and you send the answer via a return statement. This means 
that the code you write for each functions is readily usable in any other project 
you have.&lt;/p&gt;

&lt;h2 id=&quot;gamification&quot;&gt;Gamification&lt;/h2&gt;

&lt;p&gt;Something that I think CodeFights does really well is 
&lt;a href=&quot;#&quot; data-toggle=&quot;popover&quot; data-trigger=&quot;focus&quot; title=&quot;Gamification&quot; data-content=&quot;The application of typical elements of game playing (e.g., point scoring,  competition with others, rules of play) to other areas of activity, typically as  an online marketing technique to encourage engagement with a product or service. -- Wikipedia&quot; onclick=&quot;return false;&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gamification&lt;/code&gt;&lt;sup&gt;i&lt;/sup&gt;&lt;/a&gt;. They have 
the typical challenges that most sites have, but they have implemented levels and 
currency. You earn xp (experience) and coins by completing a wide range of tasks. 
Currently the only thing your coins do is allow you to purchase a t-shirt, but the
ranks that you gain from xp are pretty cool. You can tell who has been around for 
a while.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/imgs/blogmedia/codefight-level.png&quot; class=&quot;img-responsive&quot; style=&quot;height:300px;margin:auto;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;They also have several other factors of gamification including badges, an arcade, 
bots, and their biggest feature - fights. Badges are badges, and you get them for 
compeleting various achievements. The arcade is awesome. It’s a level progression 
system for working on different topics. It gives you instant gratification for completing
tasks. Starting easy and slowly building to more complex challenges.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;There are a ton of features for CodeFights but better yet, you should head on over 
there and try them out. Keep learning, and keep building your skill set. CodeFights
is just one way to do that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codefights.com/signup/Tc6ZhHbjaerYfyTBB/main&quot; class=&quot;btn btn-lg btn-primary&quot;&gt;Join CodeFights&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;item&lt;/em&gt;&lt;sup style=&quot;color:blue;&quot;&gt;i&lt;/sup&gt; - Means more information is available as you click on the item.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 02:00:00 -0600</pubDate>
        <link>http://localhost:4000/2016/12/07/codefights.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/07/codefights.html</guid>
        
        
      </item>
    
      <item>
        <title>[Pluralsight] Github Guide for Beginners.</title>
        <description>&lt;p&gt;This is a post I did over at Pluralsight about Github and how to navigate and use it. It is aimed at the very new beginners, and may be a little too bland for seasoned veterns.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.pluralsight.com/github-tutorial&quot;&gt;View the Full Github Article Here…&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jan 2016 13:30:00 -0600</pubDate>
        <link>http://localhost:4000/2016/01/12/github-beginners-guide.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/01/12/github-beginners-guide.html</guid>
        
        
      </item>
    
  </channel>
</rss>
